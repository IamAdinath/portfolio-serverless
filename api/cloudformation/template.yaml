AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  Configurations and resources for Portfolio Backend

Globals:
  Function:
    Runtime: python3.12
    MemorySize: 256
    Timeout: 45
    CodeUri:
      Bucket: !Ref CodeBucket
      Key: !Ref CodePath

Resources:

  BlogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ProjectName}-Blogs-${Env}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: author
          AttributeType: S
        - AttributeName: published_at
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: author_index
          KeySchema:
            - AttributeName: author
              KeyType: HASH
            - AttributeName: published_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: status_published_at
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: published_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  CommentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ProjectName}-Blogs-Comments-${Env}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: post_id
          AttributeType: S
        - AttributeName: comment_id
          AttributeType: S
        - AttributeName: parent_comment
          AttributeType: S
      KeySchema:
        - AttributeName: post_id
          KeyType: HASH
        - AttributeName: comment_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ParentCommentIndex
          KeySchema:
            - AttributeName: post_id
              KeyType: HASH
            - AttributeName: parent_comment
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  ReactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ProjectName}-Blogs-Reactions-${Env}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: comment_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: comment_id
          KeyType: HASH
        - AttributeName: user_id
          KeyType: RANGE

  PortfolioAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${ProjectName}-API-${Env}
      StageName: !Ref Env
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt BlogUserPool.Arn
            Identity:
              Header: Authorization

  GetBlogsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-get-blogs-${Env}
      Handler: blogs.get.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess
      Events:
        AddItem:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioAPI
            Path: /get-blogs
            Method: GET
      Environment:
        Variables:
          BLOGS_TABLE: !Ref BlogsTable
          MEDIA_BUCKET: !Ref MediaBucket

  CreateBlogsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-create-blogs-${Env}
      Handler: blogs.create.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        AddItem:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioAPI
            Path: /create-blog
            Method: POST
            Auth:
              Authorizer: CognitoAuth
      Environment:
        Variables:
          BLOGS_TABLE: !Ref BlogsTable
          ENV : !Ref Env

  UpdateBlogsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-update-blogs-${Env}
      Handler: blogs.update.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        UpdateItem:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioAPI
            Path: /update-blog
            Method: POST
            Auth:
              Authorizer: CognitoAuth
      Environment:
        Variables:
          BLOGS_TABLE: !Ref BlogsTable
          ENV : !Ref Env
  
  BlogUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ProjectName}-blog-user-pool-${Env}
      AutoVerifiedAttributes:
        - email
      AliasAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: false

  BlogUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${ProjectName}-blog-user-client-${Env}
      UserPoolId: !Ref BlogUserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:3000/callback
      LogoutURLs:
        - http://localhost:3000/logout
      SupportedIdentityProviders:
        - COGNITO
        # - Google

  # BlogGoogleIdentityProvider:
  #   Type: AWS::Cognito::UserPoolIdentityProvider
  #   Properties:
  #     ProviderName: Google
  #     ProviderType: Google
  #     UserPoolId: !Ref BlogUserPool
  #     AttributeMapping:
  #       email: email
  #       username: sub
  #     ProviderDetails:
  #       client_id: !Ref GoogleClientId
  #       authorize_scopes: email profile openid

  BlogUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: user
      Description: Regular blog readers and writers
      UserPoolId: !Ref BlogUserPool

  BlogAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admin
      Description: Admins with elevated permissions
      UserPoolId: !Ref BlogUserPool

  BlogIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${ProjectName}-blog-identity-pool-${Env}
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref BlogUserPoolClient
          ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${BlogUserPool}

  BlogIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref BlogIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn

  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-blog-auth-role-${Env}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref BlogIdentityPool
              "ForAnyValue:StringLike":
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: allowDynamoAndCognito
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: "*"

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ProjectName}-users-${Env}
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  BlogUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${ProjectName}-blog-${Env}-auth
      UserPoolId: !Ref BlogUserPool

  ConfirmUserLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-confirm-user-${Env}
      Handler: users.confirm.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
        - AmazonCognitoPowerUser
      Events:
        AddItem:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioAPI
            Path: /confirm-user
            Method: POST
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
          USER_POOL_ID: !Ref BlogUserPool

  MediaBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub ${ProjectName}-mediabucket-${Env}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
            AllowedOrigins:
              - "*"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 
            - s3:GetObject
            Resource: !Sub arn:aws:s3:::${MediaBucket}/*
  


  CognitoAuth:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      RestApiId: !Ref PortfolioAPI
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt BlogUserPool.Arn

  GetBlogByIdLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-get-blog-by-id-${Env}
      Handler: blogs.getbyid.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess
      Events:
        AddItem:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioAPI
            Path: /get-blog
            Method: GET
      Environment:
        Variables:
          BLOGS_TABLE: !Ref BlogsTable
          MEDIA_BUCKET: !Ref MediaBucket

  UploadToS3Lambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-upload-to-s3-${Env}
      Handler: common.upload_to_s3.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3FullAccess

  GetMediaLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-get-media-${Env}
      Handler: media.get_media.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3ReadOnlyAccess
      Events:
        GetMedia:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioAPI
            Path: /get-media
            Method: GET
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          PROFILE_IMAGE_PATH: !Ref ProfileImagePath
          RESUME_PATH: !Ref ResumePath
      Events:
        AddItem:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioAPI
            Path: /upload-to-s3
            Method: POST
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          ENV : !Ref Env

  GetPresignedUrlLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-get-presigned-url-${Env}
      Handler: common.get_presigned_url.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3FullAccess
      Events:
        AddItem:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioAPI
            Path: /get-presigned-url
            Method: GET
      Environment:
        Variables:
          MEDIA_BUCKET: !Ref MediaBucket
          ENV : !Ref Env

Parameters:
  ProjectName:
    Default: portfolio
    Description: The name of the project. Will be used as prefix for resource names
    Type: String
  Env:
    Default: dev
    Description: The name of this environment. Will be used to name resources
    Type: String
  CodeBucket:
    Description: The S3 Bucket of lambda code uploaded to
    Type: String
  CodePath:
    Description: The S3 path to the lambda zip file
    Type: String
  PythonRuntime:
    Description: The Python version to use for lambda functions
    Type: String
    Default: python3.12
  GoogleClientId:
    Type: String
    Description: Google OAuth Client ID
  GoogleClientSecret:
    Type: String
    Description: Google OAuth Client Secret
  LinkedInClientId:
    Type: String
    Description: LinkedIn OAuth Client ID
  LinkedInClientSecret:
    Type: String
    Description: LinkedIn OAuth Client Secret
  ProfileImagePath:
    Type: String
    Description: S3 path to profile image
    Default: public/Adinath_Gore.jpg
  ResumePath:
    Type: String
    Description: S3 path to resume file
    Default: public/Adinath_Gore_Resume.pdf

Outputs:
  ApiBaseUrl:
    Description: "Base URL for the API Gateway"
    Value: !Sub "https://${PortfolioAPI}.execute-api.${AWS::Region}.amazonaws.com/${Env}"
  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref BlogUserPool
  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref BlogUserPoolClient
  CognitoIdentityPoolId:
    Description: "Cognito Identity Pool ID"
    Value: !Ref BlogIdentityPool
  MediaBucketName:
    Description: "S3 Bucket for media files"
    Value: !Ref MediaBucket
  UserPoolDomain:
    Description: "Cognito User Pool Domain"
    Value: !Ref BlogUserPoolDomain