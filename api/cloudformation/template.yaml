AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  Configurations and resources for Portfolio Backend

Globals:
  Function:
    Runtime: python3.12
    MemorySize: 256
    Timeout: 45
    CodeUri:
      Bucket: !Ref CodeBucket
      Key: !Ref CodePath

Resources:

  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Posts
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: postId
          AttributeType: S
        - AttributeName: authorId
          AttributeType: S
        - AttributeName: publishedAt
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: postId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AuthorIdIndex
          KeySchema:
            - AttributeName: authorId
              KeyType: HASH
            - AttributeName: publishedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: StatusPublishedAtIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: publishedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  CommentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Comments
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: postId
          AttributeType: S
        - AttributeName: commentId
          AttributeType: S
        - AttributeName: parentCommentId
          AttributeType: S
      KeySchema:
        - AttributeName: postId
          KeyType: HASH
        - AttributeName: commentId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ParentCommentIndex
          KeySchema:
            - AttributeName: postId
              KeyType: HASH
            - AttributeName: parentCommentId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  ReactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Reactions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: commentId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: commentId
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE

  PortfolioAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub PortfolioAPI-${Env}
      StageName: !Ref Env
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  GetBlogsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub get-blogs-${Env}
      Handler: blogs.get.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        AddItem:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioAPI
            Path: /get-blogs
            Method: GET
      Environment:
        Variables:
          POSTS_TABLE: !Ref PostsTable

  CreateBlogsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub create-blogs-${Env}
      Handler: blogs.create.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        AddItem:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioAPI
            Path: /create-blog
            Method: GET
      Environment:
        Variables:
          POSTS_TABLE: !Ref PostsTable
          ENV : !Ref Env
  
  BlogUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub blog-user-pool-${Env}
      AutoVerifiedAttributes:
        - email
      AliasAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: false

  BlogUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub blog-user-client-${Env}
      UserPoolId: !Ref BlogUserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:3000/callback  # Replace in prod
      LogoutURLs:
        - http://localhost:3000/logout    # Replace in prod
      SupportedIdentityProviders:
        - COGNITO
        # - Google

  # BlogGoogleIdentityProvider:
  #   Type: AWS::Cognito::UserPoolIdentityProvider
  #   Properties:
  #     ProviderName: Google
  #     ProviderType: Google
  #     UserPoolId: !Ref BlogUserPool
  #     AttributeMapping:
  #       email: email
  #       username: sub
  #     ProviderDetails:
  #       client_id: !Ref GoogleClientId
  #       authorize_scopes: email profile openid

  BlogUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: user
      Description: Regular blog readers and writers
      UserPoolId: !Ref BlogUserPool

  BlogAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admin
      Description: Admins with elevated permissions
      UserPoolId: !Ref BlogUserPool

  BlogIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub blog-identity-pool-${Env}
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref BlogUserPoolClient
          ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${BlogUserPool}

  BlogIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref BlogIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn

  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub blog-auth-role-${Env}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref BlogIdentityPool
              "ForAnyValue:StringLike":
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: allowDynamoAndCognito
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: "*"

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub users-${Env}
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  BlogUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub blog-${Env}-auth
      UserPoolId: !Ref BlogUserPool

  ConfirmUserLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub confirm-user-${Env}
      Handler: users.confirm.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
        - AmazonCognitoPowerUser
      Events:
        AddItem:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioAPI
            Path: /confirm-user
            Method: POST
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable

  MediaBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub mediabucket-${Env}
      AccessControl: Private
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  
  DownloadResumeLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub download-resume-${Env}
      Handler: resume.download.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3FullAccess
      Environment:
        Variables:
          RESUME_BUCKET: !Ref MediaBucket
          RESUME_KEY: resume/resume.pdf
      Events:
        AddItem:
          Type: Api
          Properties:
            RestApiId: !Ref PortfolioAPI
            Path: /download-resume
            Method: GET
  
  MediaBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref MediaBucket
    PolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Sid: AllowCloudFrontOAC
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: "*"
          Resource: !Sub "${MediaBucket.Arn}/*"
          Condition:
            StringEquals:
              AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${MediaDistribution}"

        - Sid: AllowSignedURLDownload
          Effect: Allow
          Principal: "*"
          Action: "s3:GetObject"
          Resource: !Sub "${MediaBucket.Arn}/*"

Parameters:
  Env:
    Default: dev
    Description: The name of this environment. Will be used to name resources
    Type: String
  CodeBucket:
    Description: The S3 Bucket of lambda code uploaded to
    Type: String
  CodePath:
    Description: The S3 path to the lambda zip file
    Type: String
  PythonRuntime:
    Description: The Python version to use for lambda functions
    Type: String
    Default: python3.12
  GoogleClientId:
    Type: String
    Description: Google OAuth Client ID
  GoogleClientSecret:
    Type: String
    Description: Google OAuth Client Secret
  LinkedInClientId:
    Type: String
    Description: LinkedIn OAuth Client ID
  LinkedInClientSecret:
    Type: String
    Description: LinkedIn OAuth Client Secret

Outputs:
  ApiBaseUrl:
    Description: "Base URL for the API Gateway"
    Value: !Sub "https://${PortfolioAPI}.execute-api.${AWS::Region}.amazonaws.com/${Env}"