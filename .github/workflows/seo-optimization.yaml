name: SEO Optimization & Monitoring

on:
  # Run after successful deployments
  workflow_run:
    workflows: ["Optimized Portfolio Deployment"]
    types:
      - completed
    branches:
      - master
      - dev
  
  # Manual trigger for SEO updates
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to optimize'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - dev
      skip_validation:
        description: 'Skip SEO validation'
        required: false
        default: false
        type: boolean

  # Schedule for regular SEO monitoring
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: "22"

jobs:
  # Determine environment and setup
  setup:
    name: 🔧 Setup SEO Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      site-url: ${{ steps.env.outputs.site-url }}
      bucket-name: ${{ steps.env.outputs.bucket-name }}
      distribution-id: ${{ steps.env.outputs.distribution-id }}
    
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref }}" == "refs/heads/master" ]; then
            ENV="prod"
          else
            ENV="dev"
          fi
          
          echo "environment=${ENV}" >> $GITHUB_OUTPUT
          
          if [ "$ENV" == "prod" ]; then
            echo "site-url=https://adinathgore.com" >> $GITHUB_OUTPUT
            echo "bucket-name=${{ vars.UI_BUCKET_NAME_PROD }}" >> $GITHUB_OUTPUT
            echo "distribution-id=${{ vars.CLOUDFRONT_DISTRIBUTION_ID_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "site-url=https://dev.adinathgore.com" >> $GITHUB_OUTPUT
            echo "bucket-name=${{ vars.UI_BUCKET_NAME_DEV }}" >> $GITHUB_OUTPUT
            echo "distribution-id=${{ vars.CLOUDFRONT_DISTRIBUTION_ID_DEV }}" >> $GITHUB_OUTPUT
          fi
          
          echo "🎯 Target environment: ${ENV}"

  # Generate and update SEO assets
  seo-assets:
    name: 🔍 Generate SEO Assets
    runs-on: ubuntu-latest
    needs: setup
    environment: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.UI_AWS_REGION }}

      - name: Generate dynamic sitemap
        run: |
          echo "🗺️ Generating dynamic sitemap for ${{ needs.setup.outputs.environment }}..."
          
          mkdir -p seo-assets
          
          # Get current timestamp
          CURRENT_TIME=$(date -u +%Y-%m-%dT%H:%M:%S+00:00)
          SITE_URL="${{ needs.setup.outputs.site-url }}"
          
          # Create comprehensive sitemap
          cat > seo-assets/sitemap.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
                  xmlns:news="http://www.google.com/schemas/sitemap-news/0.9"
                  xmlns:xhtml="http://www.w3.org/1999/xhtml"
                  xmlns:mobile="http://www.google.com/schemas/sitemap-mobile/1.0"
                  xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
            
            <!-- Main pages -->
            <url>
              <loc>${SITE_URL}/</loc>
              <lastmod>${CURRENT_TIME}</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
              <mobile:mobile/>
            </url>
            
            <url>
              <loc>${SITE_URL}/about</loc>
              <lastmod>${CURRENT_TIME}</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.8</priority>
              <mobile:mobile/>
            </url>
            
            <url>
              <loc>${SITE_URL}/resume</loc>
              <lastmod>${CURRENT_TIME}</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.9</priority>
              <mobile:mobile/>
            </url>
            
            <url>
              <loc>${SITE_URL}/blogs</loc>
              <lastmod>${CURRENT_TIME}</lastmod>
              <changefreq>weekly</changefreq>
              <priority>0.8</priority>
              <mobile:mobile/>
            </url>
            
          </urlset>
          EOF
          
          echo "✅ Sitemap generated with $(grep -c '<url>' seo-assets/sitemap.xml) URLs"

      - name: Generate robots.txt
        run: |
          echo "🤖 Generating robots.txt for ${{ needs.setup.outputs.environment }}..."
          
          SITE_URL="${{ needs.setup.outputs.site-url }}"
          ENV="${{ needs.setup.outputs.environment }}"
          
          if [ "$ENV" == "prod" ]; then
            # Production robots.txt - allow all
            cat > seo-assets/robots.txt << EOF
          User-agent: *
          Allow: /
          Disallow: /admin
          Disallow: /writer
          Disallow: /auth
          Disallow: /*.json$
          Disallow: /*?*
          
          # Specific bot instructions
          User-agent: Googlebot
          Allow: /
          Crawl-delay: 1
          
          User-agent: Bingbot
          Allow: /
          Crawl-delay: 1
          
          User-agent: Slurp
          Allow: /
          Crawl-delay: 2
          
          # Block aggressive crawlers
          User-agent: AhrefsBot
          Disallow: /
          
          User-agent: MJ12bot
          Disallow: /
          
          # Sitemap location
          Sitemap: ${SITE_URL}/sitemap.xml
          
          # Host directive
          Host: ${SITE_URL}
          EOF
          else
            # Development robots.txt - restrict crawling
            cat > seo-assets/robots.txt << EOF
          User-agent: *
          Disallow: /
          
          # Allow only specific bots for testing
          User-agent: Googlebot
          Disallow: /
          
          # Sitemap for development
          Sitemap: ${SITE_URL}/sitemap.xml
          EOF
          fi
          
          echo "✅ Robots.txt generated for $ENV environment"

      - name: Generate additional SEO files
        run: |
          echo "📄 Generating additional SEO files..."
          
          SITE_URL="${{ needs.setup.outputs.site-url }}"
          ENV="${{ needs.setup.outputs.environment }}"
          
          # Generate security.txt
          cat > seo-assets/security.txt << EOF
          Contact: mailto:security@adinathgore.com
          Contact: https://adinathgore.com/contact
          Expires: $(date -d '+1 year' -u +%Y-%m-%dT%H:%M:%S.000Z)
          Preferred-Languages: en
          Canonical: ${SITE_URL}/.well-known/security.txt
          Policy: ${SITE_URL}/security-policy
          Acknowledgments: ${SITE_URL}/security-acknowledgments
          EOF
          
          # Generate humans.txt
          cat > seo-assets/humans.txt << EOF
          /* TEAM */
          Developer: Adinath Gore
          Role: Python Developer & Cloud Engineer
          Contact: adinath.gore [at] example.com
          Location: India
          
          /* SITE */
          Last update: $(date -u +%Y/%m/%d)
          Language: English
          Doctype: HTML5
          IDE: VS Code, Kiro
          Standards: HTML5, CSS3, ES6+
          Components: React, TypeScript, AWS
          Software: Python, Django, Flask, AWS Lambda
          
          /* THANKS */
          Built with ❤️ using:
          - React & TypeScript
          - AWS (Lambda, CloudFront, S3)
          - Python & Django
          - GitHub Actions
          - And lots of ☕
          
          Special thanks to the open source community!
          EOF
          
          # Generate manifest.json if not exists
          if [ ! -f "seo-assets/manifest.json" ]; then
            cat > seo-assets/manifest.json << EOF
          {
            "name": "Adinath Gore - Python Developer & Cloud Engineer",
            "short_name": "Adinath Gore",
            "description": "Portfolio of Adinath Gore, Python Developer and Cloud Engineer specializing in AWS, Django, and cloud solutions",
            "start_url": "/",
            "display": "standalone",
            "background_color": "#ffffff",
            "theme_color": "#667eea",
            "orientation": "portrait-primary",
            "categories": ["portfolio", "developer", "technology", "python", "cloud"],
            "lang": "en",
            "dir": "ltr",
            "icons": [
              {
                "src": "/favicon.ico",
                "sizes": "64x64 32x32 24x24 16x16",
                "type": "image/x-icon"
              },
              {
                "src": "/favicon-32x32.png",
                "type": "image/png",
                "sizes": "32x32"
              },
              {
                "src": "/favicon-16x16.png",
                "type": "image/png",
                "sizes": "16x16"
              }
            ],
            "screenshots": [
              {
                "src": "/screenshot-wide.png",
                "sizes": "1280x720",
                "type": "image/png",
                "form_factor": "wide"
              },
              {
                "src": "/screenshot-narrow.png",
                "sizes": "640x1136",
                "type": "image/png",
                "form_factor": "narrow"
              }
            ]
          }
          EOF
          fi
          
          echo "✅ Additional SEO files generated"

      - name: Upload SEO assets to S3
        run: |
          echo "📤 Uploading SEO assets to S3..."
          
          BUCKET="${{ needs.setup.outputs.bucket-name }}"
          
          # Upload sitemap with proper headers
          aws s3 cp seo-assets/sitemap.xml s3://${BUCKET}/sitemap.xml \
            --content-type "application/xml" \
            --cache-control "public, max-age=3600, s-maxage=7200" \
            --metadata "generated=$(date -u +%Y-%m-%dT%H:%M:%SZ),environment=${{ needs.setup.outputs.environment }}"
          
          # Upload robots.txt
          aws s3 cp seo-assets/robots.txt s3://${BUCKET}/robots.txt \
            --content-type "text/plain" \
            --cache-control "public, max-age=86400"
          
          # Upload security.txt to .well-known directory
          aws s3 cp seo-assets/security.txt s3://${BUCKET}/.well-known/security.txt \
            --content-type "text/plain" \
            --cache-control "public, max-age=86400"
          
          # Upload humans.txt
          aws s3 cp seo-assets/humans.txt s3://${BUCKET}/humans.txt \
            --content-type "text/plain" \
            --cache-control "public, max-age=86400"
          
          # Upload manifest.json if it doesn't exist
          if ! aws s3api head-object --bucket ${BUCKET} --key manifest.json 2>/dev/null; then
            aws s3 cp seo-assets/manifest.json s3://${BUCKET}/manifest.json \
              --content-type "application/json" \
              --cache-control "public, max-age=86400"
          fi
          
          echo "✅ SEO assets uploaded successfully"

      - name: Invalidate CloudFront cache
        if: needs.setup.outputs.distribution-id != ''
        run: |
          echo "🔄 Invalidating CloudFront cache..."
          
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.setup.outputs.distribution-id }} \
            --paths "/sitemap.xml" "/robots.txt" "/.well-known/*" "/humans.txt" "/manifest.json"
          
          echo "✅ CloudFront invalidation initiated"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: seo-assets-${{ needs.setup.outputs.environment }}
          path: seo-assets/
          retention-days: 30

  # SEO validation and monitoring
  seo-validation:
    name: 🔍 SEO Validation
    runs-on: ubuntu-latest
    needs: [setup, seo-assets]
    if: github.event.inputs.skip_validation != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Wait for CloudFront propagation
        run: |
          echo "⏳ Waiting for CloudFront propagation..."
          sleep 60

      - name: Comprehensive SEO validation
        run: |
          echo "🔍 Running comprehensive SEO validation..."
          
          SITE_URL="${{ needs.setup.outputs.site-url }}"
          ERRORS=0
          WARNINGS=0
          
          # Function to test URL
          test_url() {
            local url=$1
            local expected_content_type=$2
            local description=$3
            
            echo "Testing: $description"
            
            response=$(curl -s -o /dev/null -w "%{http_code}|%{content_type}" "$url")
            http_code=$(echo $response | cut -d'|' -f1)
            content_type=$(echo $response | cut -d'|' -f2)
            
            if [ "$http_code" == "200" ]; then
              if [[ "$content_type" == *"$expected_content_type"* ]]; then
                echo "✅ $description - OK ($http_code, $content_type)"
              else
                echo "⚠️ $description - Wrong content type ($content_type)"
                WARNINGS=$((WARNINGS + 1))
              fi
            else
              echo "❌ $description - Failed ($http_code)"
              ERRORS=$((ERRORS + 1))
            fi
          }
          
          # Test main site
          test_url "$SITE_URL" "text/html" "Main site"
          
          # Test SEO assets
          test_url "$SITE_URL/sitemap.xml" "application/xml" "Sitemap"
          test_url "$SITE_URL/robots.txt" "text/plain" "Robots.txt"
          test_url "$SITE_URL/humans.txt" "text/plain" "Humans.txt"
          test_url "$SITE_URL/.well-known/security.txt" "text/plain" "Security.txt"
          test_url "$SITE_URL/manifest.json" "application/json" "Web manifest"
          
          # Test HTTPS and security
          echo ""
          echo "🔒 Testing HTTPS and security headers..."
          
          headers=$(curl -s -I "$SITE_URL")
          
          if echo "$headers" | grep -i "strict-transport-security" > /dev/null; then
            echo "✅ HSTS header present"
          else
            echo "⚠️ HSTS header missing"
            WARNINGS=$((WARNINGS + 1))
          fi
          
          if echo "$headers" | grep -i "x-content-type-options" > /dev/null; then
            echo "✅ X-Content-Type-Options header present"
          else
            echo "⚠️ X-Content-Type-Options header missing"
            WARNINGS=$((WARNINGS + 1))
          fi
          
          if echo "$headers" | grep -i "x-frame-options\|content-security-policy" > /dev/null; then
            echo "✅ Frame protection headers present"
          else
            echo "⚠️ Frame protection headers missing"
            WARNINGS=$((WARNINGS + 1))
          fi
          
          # Test compression
          echo ""
          echo "🗜️ Testing compression..."
          
          if curl -s -H "Accept-Encoding: gzip" -I "$SITE_URL" | grep -i "content-encoding: gzip" > /dev/null; then
            echo "✅ Gzip compression working"
          else
            echo "⚠️ Gzip compression not detected"
            WARNINGS=$((WARNINGS + 1))
          fi
          
          if curl -s -H "Accept-Encoding: br" -I "$SITE_URL" | grep -i "content-encoding: br" > /dev/null; then
            echo "✅ Brotli compression working"
          else
            echo "⚠️ Brotli compression not detected"
            WARNINGS=$((WARNINGS + 1))
          fi
          
          # Test mobile responsiveness
          echo ""
          echo "📱 Testing mobile responsiveness..."
          
          mobile_headers=$(curl -s -I -H "User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)" "$SITE_URL")
          
          if echo "$mobile_headers" | grep -i "200 OK" > /dev/null; then
            echo "✅ Mobile accessibility OK"
          else
            echo "❌ Mobile accessibility failed"
            ERRORS=$((ERRORS + 1))
          fi
          
          # Summary
          echo ""
          echo "📊 SEO Validation Summary"
          echo "========================="
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Site URL: $SITE_URL"
          echo "Errors: $ERRORS"
          echo "Warnings: $WARNINGS"
          
          if [ $ERRORS -eq 0 ]; then
            if [ $WARNINGS -eq 0 ]; then
              echo "🎉 All SEO validations passed perfectly!"
            else
              echo "✅ SEO validation passed with $WARNINGS warnings"
            fi
          else
            echo "❌ SEO validation failed with $ERRORS errors and $WARNINGS warnings"
            exit 1
          fi

  # Search engine submission (production only)
  search-engine-submission:
    name: 📡 Search Engine Submission
    runs-on: ubuntu-latest
    needs: [setup, seo-validation]
    if: needs.setup.outputs.environment == 'prod' && github.event.inputs.skip_validation != 'true'
    
    steps:
      - name: Submit to search engines
        run: |
          echo "📡 Submitting sitemap to search engines..."
          
          SITE_URL="${{ needs.setup.outputs.site-url }}"
          SITEMAP_URL="${SITE_URL}/sitemap.xml"
          
          # Google Search Console ping
          echo "Submitting to Google..."
          if curl -s "https://www.google.com/ping?sitemap=${SITEMAP_URL}" | grep -q "successfully"; then
            echo "✅ Google submission successful"
          else
            echo "⚠️ Google submission may have failed"
          fi
          
          # Bing Webmaster Tools ping
          echo "Submitting to Bing..."
          if curl -s "https://www.bing.com/ping?sitemap=${SITEMAP_URL}" | grep -q "Thanks"; then
            echo "✅ Bing submission successful"
          else
            echo "⚠️ Bing submission may have failed"
          fi
          
          echo "✅ Search engine submission completed"

  # Performance monitoring with Lighthouse
  performance-monitoring:
    name: 📊 Performance Monitoring
    runs-on: ubuntu-latest
    needs: [setup, seo-validation]
    if: needs.setup.outputs.environment == 'prod'
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse audit
        run: |
          echo "🔍 Running Lighthouse performance audit..."
          
          SITE_URL="${{ needs.setup.outputs.site-url }}"
          
          # Create Lighthouse config
          cat > lighthouserc.js << EOF
          module.exports = {
            ci: {
              collect: {
                url: ['${SITE_URL}', '${SITE_URL}/about', '${SITE_URL}/resume'],
                numberOfRuns: 2,
                settings: {
                  chromeFlags: '--no-sandbox --headless --disable-gpu'
                }
              },
              assert: {
                assertions: {
                  'categories:performance': ['warn', {minScore: 0.8}],
                  'categories:accessibility': ['error', {minScore: 0.9}],
                  'categories:best-practices': ['warn', {minScore: 0.8}],
                  'categories:seo': ['error', {minScore: 0.9}],
                  'categories:pwa': ['warn', {minScore: 0.6}]
                }
              },
              upload: {
                target: 'temporary-public-storage'
              }
            }
          };
          EOF
          
          lhci autorun || echo "Lighthouse audit completed with warnings"

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results-${{ needs.setup.outputs.environment }}
          path: .lighthouseci/
          retention-days: 30

  # Generate comprehensive SEO report
  seo-report:
    name: 📋 SEO Report
    runs-on: ubuntu-latest
    needs: [setup, seo-assets, seo-validation]
    if: always()
    
    steps:
      - name: Generate SEO report
        run: |
          echo "📋 Generating comprehensive SEO report..."
          
          cat > seo-report.md << EOF
          # 🔍 SEO Optimization Report
          
          **Generated:** $(date -u)
          **Environment:** ${{ needs.setup.outputs.environment }}
          **Site URL:** ${{ needs.setup.outputs.site-url }}
          **Workflow:** ${{ github.workflow }}
          **Run ID:** ${{ github.run_id }}
          
          ## 📊 Deployment Status
          
          | Component | Status |
          |-----------|--------|
          | SEO Assets | ${{ needs.seo-assets.result == 'success' && '✅ Success' || '❌ Failed' }} |
          | SEO Validation | ${{ needs.seo-validation.result == 'success' && '✅ Success' || needs.seo-validation.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |
          | Search Submission | ${{ needs.search-engine-submission.result == 'success' && '✅ Success' || needs.search-engine-submission.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |
          | Performance Check | ${{ needs.performance-monitoring.result == 'success' && '✅ Success' || needs.performance-monitoring.result == 'skipped' && '⏭️ Skipped' || '⚠️ Warning' }} |
          
          ## 🔗 SEO Assets Generated
          
          - [x] **Sitemap.xml** - Dynamic XML sitemap with mobile support
          - [x] **Robots.txt** - Environment-specific crawling rules
          - [x] **Security.txt** - Security contact information
          - [x] **Humans.txt** - Developer and site information
          - [x] **Manifest.json** - Progressive Web App manifest
          
          ## 🎯 SEO URLs
          
          - **Sitemap:** ${{ needs.setup.outputs.site-url }}/sitemap.xml
          - **Robots:** ${{ needs.setup.outputs.site-url }}/robots.txt
          - **Security:** ${{ needs.setup.outputs.site-url }}/.well-known/security.txt
          - **Humans:** ${{ needs.setup.outputs.site-url }}/humans.txt
          - **Manifest:** ${{ needs.setup.outputs.site-url }}/manifest.json
          
          ## 🚀 Optimizations Applied
          
          - ✅ Dynamic sitemap generation with timestamps
          - ✅ Environment-specific robots.txt
          - ✅ Comprehensive security headers
          - ✅ Asset compression (gzip + brotli)
          - ✅ CloudFront cache optimization
          - ✅ Mobile-first responsive design
          - ✅ Progressive Web App features
          - ✅ Search engine submission automation
          
          ## 📈 Next Steps
          
          1. **Monitor Search Console** for indexing status
          2. **Track Core Web Vitals** performance metrics
          3. **Analyze keyword rankings** and organic traffic
          4. **Review security headers** effectiveness
          5. **Monitor CloudFront** cache hit ratios
          6. **Update content** based on SEO insights
          
          ## 🛠️ Tools & Resources
          
          - [Google Search Console](https://search.google.com/search-console)
          - [PageSpeed Insights](https://pagespeed.web.dev/)
          - [GTmetrix](https://gtmetrix.com/)
          - [Lighthouse CI](https://github.com/GoogleChrome/lighthouse-ci)
          - [Web.dev Measure](https://web.dev/measure/)
          
          ---
          
          *Report generated by GitHub Actions SEO Optimization workflow*
          EOF
          
          echo "✅ SEO report generated"

      - name: Upload SEO report
        uses: actions/upload-artifact@v4
        with:
          name: seo-report-${{ needs.setup.outputs.environment }}-${{ github.run_number }}
          path: seo-report.md
          retention-days: 90

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('seo-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔍 SEO Optimization Results\n\n${report}`
            });

  # Cleanup old artifacts
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [seo-report]
    if: always()
    
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oldArtifacts = artifacts.data.artifacts
              .filter(artifact => artifact.name.startsWith('seo-'))
              .filter(artifact => {
                const createdAt = new Date(artifact.created_at);
                const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
                return createdAt < thirtyDaysAgo;
              });
            
            for (const artifact of oldArtifacts) {
              console.log(`Deleting old artifact: ${artifact.name}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
            
            console.log(`Cleaned up ${oldArtifacts.length} old SEO artifacts`);

      - name: Summary
        run: |
          echo "🎉 SEO Optimization workflow completed!"
          echo ""
          echo "📊 Summary:"
          echo "  Environment: ${{ needs.setup.outputs.environment }}"
          echo "  Site URL: ${{ needs.setup.outputs.site-url }}"
          echo "  Assets Generated: ✅"
          echo "  Validation: ${{ needs.seo-validation.result }}"
          echo "  Performance: ${{ needs.performance-monitoring.result }}"
          echo ""
          echo "🔗 Check the artifacts for detailed reports and generated assets."