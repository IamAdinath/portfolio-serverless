name: Deploy Portfolio with SEO Optimization

on:
  push:
    branches:
      - dev
      - master
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  PYTHON_VERSION: "3.12"

jobs:
  # --------------------
  # Development Environment
  # --------------------
  deploy-api-dev:
    name: Deploy API - Dev
    runs-on: ubuntu-latest
    environment: dev
    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.API_AWS_REGION }}

      - name: Deploy API Stack
        working-directory: api/cloudformation/
        run: |
          chmod +x ./deploy.sh
          ./deploy.sh
        env:
          PROJECT_NAME: ${{ vars.PROJECT_NAME }}
          ENV: dev
          REGION: ${{ vars.API_AWS_REGION }}
          STACK_NAME: ${{ vars.API_STACK_NAME_DEV }}
          CODE_BUCKET: ${{ vars.API_BUCKET_NAME_DEV }}
          DEFAULT_PYTHON_RUNTIME: python3.12

  deploy-ui-dev:
    name: Deploy UI - Dev
    runs-on: ubuntu-latest
    environment: dev
    needs: deploy-api-dev
    if: github.ref == 'refs/heads/dev'
    outputs:
      ui-url: ${{ steps.deploy.outputs.ui-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: |
          # Verify package.json exists
          if [ ! -f "package.json" ]; then
            echo "❌ package.json not found in frontend directory"
            echo "📁 Contents of frontend directory:"
            ls -la
            exit 1
          fi
          echo "✅ package.json found"
          
          # Install dependencies
          npm ci --prefer-offline --no-audit

      - name: Build application
        working-directory: frontend
        run: |
          npm run build
        env:
          GENERATE_SOURCEMAP: false
          CI: false
          REACT_APP_API_BASE_URL: ${{ vars.REACT_APP_API_BASE_URL_DEV }}
          REACT_APP_COGNITO_USER_POOL_ID: ${{ vars.REACT_APP_COGNITO_USER_POOL_ID_DEV }}
          REACT_APP_COGNITO_CLIENT_ID: ${{ vars.REACT_APP_COGNITO_CLIENT_ID_DEV }}
          REACT_APP_COGNITO_REGION: ${{ vars.REACT_APP_COGNITO_REGION }}
          REACT_APP_COGNITO_DOMAIN: ${{ vars.REACT_APP_COGNITO_DOMAIN_DEV }}
          REACT_APP_COGNITO_REDIRECT_SIGNIN: ${{ vars.REACT_APP_COGNITO_REDIRECT_SIGNIN_DEV }}
          REACT_APP_COGNITO_REDIRECT_SIGNOUT: ${{ vars.REACT_APP_COGNITO_REDIRECT_SIGNOUT_DEV }}
          REACT_APP_API_KEY: ${{ vars.REACT_APP_API_KEY_DEV }}



      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.UI_AWS_REGION }}

      - name: Deploy UI Stack (Dev)
        id: deploy
        working-directory: frontend/cloudformation/
        run: |
          chmod +x ./deploy-dev.sh
          ./deploy-dev.sh
          
          # Get CloudFront URL
          UI_URL=$(aws cloudformation describe-stacks \
            --stack-name ${PROJECT_NAME}-${ENV}-UI \
            --region ${REGION} \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontURL'].OutputValue" \
            --output text)
          
          echo "ui-url=${UI_URL}" >> $GITHUB_OUTPUT
          echo "✅ UI deployed to: ${UI_URL}"
        env:
          PROJECT_NAME: ${{ vars.PROJECT_NAME }}
          ENV: dev
          REGION: ${{ vars.UI_AWS_REGION }}
          UI_BUCKET_NAME: ${{ vars.UI_BUCKET_NAME_DEV }}
          REACT_APP_API_BASE_URL: ${{ vars.REACT_APP_API_BASE_URL_DEV }}
          REACT_APP_COGNITO_USER_POOL_ID: ${{ vars.REACT_APP_COGNITO_USER_POOL_ID_DEV }}
          REACT_APP_COGNITO_CLIENT_ID: ${{ vars.REACT_APP_COGNITO_CLIENT_ID_DEV }}
          REACT_APP_COGNITO_REGION: ${{ vars.REACT_APP_COGNITO_REGION }}
          REACT_APP_COGNITO_DOMAIN: ${{ vars.REACT_APP_COGNITO_DOMAIN_DEV }}
          REACT_APP_COGNITO_REDIRECT_SIGNIN: ${{ vars.REACT_APP_COGNITO_REDIRECT_SIGNIN_DEV }}
          REACT_APP_COGNITO_REDIRECT_SIGNOUT: ${{ vars.REACT_APP_COGNITO_REDIRECT_SIGNOUT_DEV }}
          REACT_APP_API_KEY: ${{ vars.REACT_APP_API_KEY_DEV }}

  # SEO Optimization - Dev (Separate job)
  seo-optimization-dev:
    name: SEO Optimization - Dev
    runs-on: ubuntu-latest
    needs: deploy-ui-dev
    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.UI_AWS_REGION }}

      - name: Generate and upload SEO assets
        run: |
          echo "🔍 Generating SEO assets for dev environment..."
          
          # Create temporary directory for SEO assets
          mkdir -p seo-assets
          
          # Generate sitemap for dev
          cat > seo-assets/sitemap.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url>
              <loc>https://dev.adinathgore.com/</loc>
              <lastmod>$(date -u +%Y-%m-%dT%H:%M:%S+00:00)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
            </url>
            <url>
              <loc>https://dev.adinathgore.com/about</loc>
              <lastmod>$(date -u +%Y-%m-%dT%H:%M:%S+00:00)</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.8</priority>
            </url>
            <url>
              <loc>https://dev.adinathgore.com/resume</loc>
              <lastmod>$(date -u +%Y-%m-%dT%H:%M:%S+00:00)</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.9</priority>
            </url>
            <url>
              <loc>https://dev.adinathgore.com/blogs</loc>
              <lastmod>$(date -u +%Y-%m-%dT%H:%M:%S+00:00)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>0.8</priority>
            </url>
          </urlset>
          EOF
          
          # Generate robots.txt for dev
          cat > seo-assets/robots.txt << EOF
          User-agent: *
          Disallow: /admin
          Disallow: /writer
          Disallow: /auth
          Allow: /
          
          Sitemap: https://dev.adinathgore.com/sitemap.xml
          EOF
          
          # Upload SEO assets to S3
          aws s3 cp seo-assets/sitemap.xml s3://${{ vars.UI_BUCKET_NAME_DEV }}/sitemap.xml --content-type "application/xml"
          aws s3 cp seo-assets/robots.txt s3://${{ vars.UI_BUCKET_NAME_DEV }}/robots.txt --content-type "text/plain"
          
          echo "✅ SEO assets uploaded successfully"

      - name: SEO Validation
        run: |
          echo "🔍 Running SEO validation..."
          
          # Wait for CloudFront to propagate
          sleep 30
          
          SITE_URL="${{ needs.deploy-ui-dev.outputs.ui-url }}"
          
          # Basic accessibility checks
          if curl -s -o /dev/null -w "%{http_code}" "${SITE_URL}" | grep -q "200"; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site is not accessible"
            exit 1
          fi
          
          if curl -s -o /dev/null -w "%{http_code}" "${SITE_URL}/sitemap.xml" | grep -q "200"; then
            echo "✅ Sitemap is accessible"
          else
            echo "⚠️ Sitemap not yet accessible (CloudFront propagation)"
          fi
          
          if curl -s -o /dev/null -w "%{http_code}" "${SITE_URL}/robots.txt" | grep -q "200"; then
            echo "✅ Robots.txt is accessible"
          else
            echo "⚠️ Robots.txt not yet accessible (CloudFront propagation)"
          fi
          
          echo "🎉 SEO validation completed for dev environment"

  # --------------------
  # Production Environment
  # --------------------
  deploy-api-prod:
    name: Deploy API - Prod
    runs-on: ubuntu-latest
    environment: prod
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.API_AWS_REGION }}

      - name: Deploy API Stack
        working-directory: api/cloudformation/
        run: |
          chmod +x ./deploy.sh
          ./deploy.sh
        env:
          PROJECT_NAME: ${{ vars.PROJECT_NAME }}
          ENV: prod
          REGION: ${{ vars.API_AWS_REGION }}
          STACK_NAME: ${{ vars.API_STACK_NAME_PROD }}
          CODE_BUCKET: ${{ vars.API_BUCKET_NAME_PROD }}
          DEFAULT_PYTHON_RUNTIME: python3.12

  deploy-ui-prod:
    name: Deploy UI - Prod
    runs-on: ubuntu-latest
    environment: prod
    needs: deploy-api-prod
    if: github.ref == 'refs/heads/master'
    outputs:
      ui-url: ${{ steps.deploy.outputs.ui-url }}
      distribution-id: ${{ steps.deploy.outputs.distribution-id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: |
          # Verify package.json exists
          if [ ! -f "package.json" ]; then
            echo "❌ package.json not found in frontend directory"
            echo "📁 Contents of frontend directory:"
            ls -la
            exit 1
          fi
          echo "✅ package.json found"
          
          # Install dependencies
          npm ci --prefer-offline --no-audit

      - name: Generate dynamic sitemap
        working-directory: frontend
        run: |
          # Create sitemap generation script
          cat > generate-sitemap.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          const baseUrl = 'https://adinathgore.com';
          const currentDate = new Date().toISOString().split('T')[0];
          
          // Static pages
          const staticPages = [
            { url: '/', changefreq: 'weekly', priority: '1.0' },
            { url: '/resume', changefreq: 'monthly', priority: '0.9' },
            { url: '/about', changefreq: 'monthly', priority: '0.8' },
            { url: '/blog', changefreq: 'weekly', priority: '0.8' }
          ];
          
          let sitemap = `<?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
                  xmlns:news="http://www.google.com/schemas/sitemap-news/0.9"
                  xmlns:xhtml="http://www.w3.org/1999/xhtml"
                  xmlns:mobile="http://www.google.com/schemas/sitemap-mobile/1.0"
                  xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">`;
          
          staticPages.forEach(page => {
            sitemap += `
            <url>
              <loc>${baseUrl}${page.url}</loc>
              <lastmod>${currentDate}</lastmod>
              <changefreq>${page.changefreq}</changefreq>
              <priority>${page.priority}</priority>
            </url>`;
          });
          
          sitemap += '\n</urlset>';
          
          fs.writeFileSync('public/sitemap.xml', sitemap);
          console.log('✅ Sitemap generated successfully');
          EOF
          
          node generate-sitemap.js
          
          # Generate production robots.txt
          cat > public/robots.txt << EOF
          User-agent: *
          Allow: /
          Disallow: /admin
          Disallow: /writer
          Disallow: /auth
          
          # Sitemap location
          Sitemap: https://adinathgore.com/sitemap.xml
          
          # Crawl delay
          Crawl-delay: 1
          EOF

      - name: Build with production SEO optimizations
        working-directory: frontend
        run: |
          npm run build
        env:
          GENERATE_SOURCEMAP: false
          CI: false
          REACT_APP_API_BASE_URL: ${{ vars.REACT_APP_API_BASE_URL_PROD }}
          REACT_APP_COGNITO_USER_POOL_ID: ${{ vars.REACT_APP_COGNITO_USER_POOL_ID_PROD }}
          REACT_APP_COGNITO_CLIENT_ID: ${{ vars.REACT_APP_COGNITO_CLIENT_ID_PROD }}
          REACT_APP_COGNITO_REGION: ${{ vars.REACT_APP_COGNITO_REGION }}
          REACT_APP_COGNITO_DOMAIN: ${{ vars.REACT_APP_COGNITO_DOMAIN_PROD }}
          REACT_APP_COGNITO_REDIRECT_SIGNIN: ${{ vars.REACT_APP_COGNITO_REDIRECT_SIGNIN_PROD }}
          REACT_APP_COGNITO_REDIRECT_SIGNOUT: ${{ vars.REACT_APP_COGNITO_REDIRECT_SIGNOUT_PROD }}
          REACT_APP_API_KEY: ${{ vars.REACT_APP_API_KEY_PROD }}

      - name: Advanced SEO optimizations and Compression
        working-directory: frontend/build
        run: |
          echo "🚀 Applying advanced SEO optimizations and compression..."
          
          # Install brotli compression tool
          sudo apt-get update && sudo apt-get install -y brotli
          
          # Advanced compression with both gzip and brotli
          echo "🗜️ Compressing with gzip (level 9) and brotli (level 11)..."
          
          # Compress JavaScript files
          find . -name "*.js" -type f -exec sh -c '
            gzip -k -9 "$1"
            brotli -k -q 11 "$1"
          ' _ {} \;
          
          # Compress CSS files
          find . -name "*.css" -type f -exec sh -c '
            gzip -k -9 "$1"
            brotli -k -q 11 "$1"
          ' _ {} \;
          
          # Compress HTML files
          find . -name "*.html" -type f -exec sh -c '
            gzip -k -9 "$1"
            brotli -k -q 11 "$1"
          ' _ {} \;
          
          # Compress other assets
          find . -name "*.json" -o -name "*.xml" -o -name "*.txt" -type f -exec sh -c '
            gzip -k -9 "$1"
            brotli -k -q 11 "$1"
          ' _ {} \;
          
          # Calculate and display compression ratios
          echo "📊 Compression Statistics:"
          for ext in js css html json xml txt; do
            if find . -name "*.$ext" -type f | head -1 | read file; then
              original_size=$(find . -name "*.$ext" -type f -exec stat -c%s {} \; | awk '{sum+=$1} END {print sum}')
              gzip_size=$(find . -name "*.$ext.gz" -type f -exec stat -c%s {} \; | awk '{sum+=$1} END {print sum}')
              brotli_size=$(find . -name "*.$ext.br" -type f -exec stat -c%s {} \; | awk '{sum+=$1} END {print sum}')
              
              if [ "$original_size" -gt 0 ]; then
                gzip_ratio=$(echo "scale=1; (1 - $gzip_size / $original_size) * 100" | bc -l 2>/dev/null || echo "N/A")
                brotli_ratio=$(echo "scale=1; (1 - $brotli_size / $original_size) * 100" | bc -l 2>/dev/null || echo "N/A")
                echo "$ext files: Original ${original_size}B, Gzip ${gzip_size}B (${gzip_ratio}% reduction), Brotli ${brotli_size}B (${brotli_ratio}% reduction)"
              fi
            fi
          done
          
          # Add comprehensive security and SEO headers to index.html
          sed -i 's/<head>/<head>\n  <!-- Security Headers -->\n  <meta http-equiv="X-Content-Type-Options" content="nosniff">\n  <meta http-equiv="X-Frame-Options" content="DENY">\n  <meta http-equiv="X-XSS-Protection" content="1; mode=block">\n  <meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin">\n  <meta http-equiv="Permissions-Policy" content="geolocation=(), microphone=(), camera=()">\n  \n  <!-- SEO Enhancements -->\n  <link rel="preconnect" href="https:\/\/fonts.googleapis.com">\n  <link rel="preconnect" href="https:\/\/fonts.gstatic.com" crossorigin>\n  <link rel="dns-prefetch" href="\/\/fonts.googleapis.com">\n  <link rel="dns-prefetch" href="\/\/fonts.gstatic.com">/' index.html
          
          # Create a comprehensive manifest.json if it doesn't exist
          if [ ! -f "manifest.json" ]; then
            cat > manifest.json << 'EOF'
          {
            "short_name": "Adinath Gore",
            "name": "Adinath Gore - Full Stack Developer",
            "description": "Portfolio of Adinath Gore, Full Stack Developer specializing in React, Node.js, and AWS",
            "icons": [
              {
                "src": "favicon.ico",
                "sizes": "64x64 32x32 24x24 16x16",
                "type": "image/x-icon"
              },
              {
                "src": "favicon-32x32.png",
                "type": "image/png",
                "sizes": "32x32"
              },
              {
                "src": "favicon-16x16.png",
                "type": "image/png",
                "sizes": "16x16"
              },
              {
                "src": "apple-touch-icon.png",
                "type": "image/png",
                "sizes": "180x180"
              }
            ],
            "start_url": ".",
            "display": "standalone",
            "theme_color": "#667eea",
            "background_color": "#ffffff",
            "categories": ["portfolio", "developer", "technology"]
          }
          EOF
          fi
          
          echo "✅ SEO optimizations applied successfully"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.UI_AWS_REGION }}

      - name: Deploy UI Stack (Prod)
        id: deploy
        working-directory: frontend/cloudformation/
        run: |
          chmod +x ./deploy-prod.sh
          ./deploy-prod.sh
          
          # Get outputs
          STACK_NAME="${PROJECT_NAME}-${ENV}-UI"
          UI_URL=$(aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --region ${REGION} \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontURL'].OutputValue" \
            --output text)
          
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name ${STACK_NAME} \
            --region ${REGION} \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionID'].OutputValue" \
            --output text)
          
          echo "ui-url=${UI_URL}" >> $GITHUB_OUTPUT
          echo "distribution-id=${DISTRIBUTION_ID}" >> $GITHUB_OUTPUT
          echo "✅ UI deployed to: ${UI_URL}"
        env:
          PROJECT_NAME: ${{ vars.PROJECT_NAME }}
          ENV: prod
          REGION: ${{ vars.UI_AWS_REGION }}
          HOSTNAME: ${{ vars.UI_HOSTNAME_PROD }}
          UI_BUCKET_NAME: ${{ vars.UI_BUCKET_NAME_PROD }}
          ACM_CERTIFICATE_ARN: ${{ vars.ACM_CERTIFICATE_ARN }}
          REACT_APP_API_BASE_URL: ${{ vars.REACT_APP_API_BASE_URL_PROD }}
          REACT_APP_COGNITO_USER_POOL_ID: ${{ vars.REACT_APP_COGNITO_USER_POOL_ID_PROD }}
          REACT_APP_COGNITO_CLIENT_ID: ${{ vars.REACT_APP_COGNITO_CLIENT_ID_PROD }}
          REACT_APP_COGNITO_REGION: ${{ vars.REACT_APP_COGNITO_REGION }}
          REACT_APP_COGNITO_DOMAIN: ${{ vars.REACT_APP_COGNITO_DOMAIN_PROD }}
          REACT_APP_COGNITO_REDIRECT_SIGNIN: ${{ vars.REACT_APP_COGNITO_REDIRECT_SIGNIN_PROD }}
          REACT_APP_COGNITO_REDIRECT_SIGNOUT: ${{ vars.REACT_APP_COGNITO_REDIRECT_SIGNOUT_PROD }}
          REACT_APP_API_KEY: ${{ vars.REACT_APP_API_KEY_PROD }}

  # SEO Optimization - Prod (Separate job)
  seo-optimization-prod:
    name: SEO Optimization - Prod
    runs-on: ubuntu-latest
    needs: deploy-ui-prod
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.UI_AWS_REGION }}

      - name: Generate advanced SEO assets
        run: |
          echo "🔍 Generating advanced SEO assets for production..."
          
          mkdir -p seo-assets
          
          # Generate comprehensive sitemap
          cat > seo-assets/sitemap.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
                  xmlns:news="http://www.google.com/schemas/sitemap-news/0.9"
                  xmlns:xhtml="http://www.w3.org/1999/xhtml"
                  xmlns:mobile="http://www.google.com/schemas/sitemap-mobile/1.0"
                  xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
            <url>
              <loc>https://adinathgore.com/</loc>
              <lastmod>$(date -u +%Y-%m-%dT%H:%M:%S+00:00)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
            </url>
            <url>
              <loc>https://adinathgore.com/about</loc>
              <lastmod>$(date -u +%Y-%m-%dT%H:%M:%S+00:00)</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.8</priority>
            </url>
            <url>
              <loc>https://adinathgore.com/resume</loc>
              <lastmod>$(date -u +%Y-%m-%dT%H:%M:%S+00:00)</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.9</priority>
            </url>
            <url>
              <loc>https://adinathgore.com/blogs</loc>
              <lastmod>$(date -u +%Y-%m-%dT%H:%M:%S+00:00)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>0.8</priority>
            </url>
          </urlset>
          EOF
          
          # Generate production robots.txt
          cat > seo-assets/robots.txt << EOF
          User-agent: *
          Allow: /
          Disallow: /admin
          Disallow: /writer
          Disallow: /auth
          
          # Sitemap location
          Sitemap: https://adinathgore.com/sitemap.xml
          
          # Crawl delay for respectful crawling
          Crawl-delay: 1
          EOF
          
          # Generate security.txt
          cat > seo-assets/security.txt << EOF
          Contact: mailto:security@adinathgore.com
          Expires: $(date -d '+1 year' -u +%Y-%m-%dT%H:%M:%S.000Z)
          Preferred-Languages: en
          Canonical: https://adinathgore.com/.well-known/security.txt
          EOF
          
          # Generate humans.txt
          cat > seo-assets/humans.txt << EOF
          /* TEAM */
          Developer: Adinath Gore
          Contact: adinath.gore@example.com
          Location: India
          
          /* SITE */
          Last update: $(date -u +%Y/%m/%d)
          Language: English
          Doctype: HTML5
          IDE: VS Code
          
          /* THANKS */
          Built with React, AWS, and lots of ☕
          EOF

      - name: Upload SEO assets with optimized headers
        run: |
          echo "📤 Uploading SEO assets with optimized headers..."
          
          # Upload sitemap with proper headers
          aws s3 cp seo-assets/sitemap.xml s3://${{ vars.UI_BUCKET_NAME_PROD }}/sitemap.xml \
            --content-type "application/xml" \
            --cache-control "public, max-age=3600" \
            --metadata "last-generated=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          # Upload robots.txt
          aws s3 cp seo-assets/robots.txt s3://${{ vars.UI_BUCKET_NAME_PROD }}/robots.txt \
            --content-type "text/plain" \
            --cache-control "public, max-age=86400"
          
          # Upload security.txt to .well-known directory
          aws s3 cp seo-assets/security.txt s3://${{ vars.UI_BUCKET_NAME_PROD }}/.well-known/security.txt \
            --content-type "text/plain" \
            --cache-control "public, max-age=86400"
          
          # Upload humans.txt
          aws s3 cp seo-assets/humans.txt s3://${{ vars.UI_BUCKET_NAME_PROD }}/humans.txt \
            --content-type "text/plain" \
            --cache-control "public, max-age=86400"
          
          echo "✅ SEO assets uploaded successfully"

      - name: Invalidate CloudFront cache
        run: |
          echo "🔄 Invalidating CloudFront cache for SEO assets..."
          
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.deploy-ui-prod.outputs.distribution-id }} \
            --paths "/sitemap.xml" "/robots.txt" "/.well-known/*" "/humans.txt"
          
          echo "✅ CloudFront invalidation initiated"

      - name: Submit to search engines
        run: |
          echo "📡 Submitting sitemap to search engines..."
          
          # Google Search Console ping
          curl -s "https://www.google.com/ping?sitemap=https://adinathgore.com/sitemap.xml" || echo "Google ping failed"
          
          # Bing Webmaster Tools ping
          curl -s "https://www.bing.com/ping?sitemap=https://adinathgore.com/sitemap.xml" || echo "Bing ping failed"
          
          echo "✅ Sitemap submission completed"

      - name: Advanced SEO validation
        run: |
          echo "🔍 Running advanced SEO validation..."
          
          # Wait for CloudFront propagation
          echo "⏳ Waiting for CloudFront propagation..."
          sleep 60
          
          SITE_URL="https://adinathgore.com"
          ERRORS=0
          
          # Test site accessibility
          if curl -s -o /dev/null -w "%{http_code}" "${SITE_URL}" | grep -q "200"; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site is not accessible"
            ERRORS=$((ERRORS + 1))
          fi
          
          # Test SEO assets
          for asset in "sitemap.xml" "robots.txt" "humans.txt" ".well-known/security.txt"; do
            if curl -s -o /dev/null -w "%{http_code}" "${SITE_URL}/${asset}" | grep -q "200"; then
              echo "✅ ${asset} is accessible"
            else
              echo "❌ ${asset} is not accessible"
              ERRORS=$((ERRORS + 1))
            fi
          done
          
          # Test HTTPS and security
          if curl -s -I "${SITE_URL}" | grep -i "strict-transport-security"; then
            echo "✅ HSTS header present"
          else
            echo "⚠️ HSTS header missing"
          fi
          
          # Test compression
          if curl -s -H "Accept-Encoding: gzip" -I "${SITE_URL}" | grep -i "content-encoding: gzip"; then
            echo "✅ Gzip compression working"
          else
            echo "⚠️ Gzip compression not detected"
          fi
          
          if [ $ERRORS -eq 0 ]; then
            echo "🎉 All SEO validations passed!"
          else
            echo "❌ ${ERRORS} SEO validation(s) failed"
            exit 1
          fi

  # --------------------
  # Performance Monitoring
  # --------------------
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [seo-optimization-prod]
    if: github.ref == 'refs/heads/master'
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_SERVER_BASE_URL: ${{ vars.UI_HOSTNAME_PROD }}

      - name: SEO Health Check
        run: |
          echo "🔍 Running SEO health checks..."
          
          SITE_URL="https://${{ vars.UI_HOSTNAME_PROD }}"
          
          # Check if site is accessible
          if curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" | grep -q "200"; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site is not accessible"
          fi
          
          # Check if sitemap is accessible
          if curl -s -o /dev/null -w "%{http_code}" "$SITE_URL/sitemap.xml" | grep -q "200"; then
            echo "✅ Sitemap is accessible"
          else
            echo "❌ Sitemap is not accessible"
          fi
          
          # Check if robots.txt is accessible
          if curl -s -o /dev/null -w "%{http_code}" "$SITE_URL/robots.txt" | grep -q "200"; then
            echo "✅ Robots.txt is accessible"
          else
            echo "❌ Robots.txt is not accessible"
          fi
          
          # Check SSL certificate and HTTPS redirect
          echo "🔒 Testing HTTPS configuration..."
          
          # Test HTTPS connection
          if curl -s -I "$SITE_URL" | grep -q "HTTP/2 200\|HTTP/1.1 200"; then
            echo "✅ HTTPS is working"
          else
            echo "❌ HTTPS connection failed"
          fi
          
          # Test HTTP to HTTPS redirect
          HTTP_URL=$(echo "$SITE_URL" | sed 's/https:/http:/')
          if curl -s -I "$HTTP_URL" | grep -q "301\|302"; then
            echo "✅ HTTP to HTTPS redirect is working"
          else
            echo "⚠️ HTTP to HTTPS redirect not detected"
          fi
          
          # Test HSTS header
          if curl -s -I "$SITE_URL" | grep -i "strict-transport-security"; then
            echo "✅ HSTS header is present"
          else
            echo "⚠️ HSTS header not found"
          fi
          
          # Test security headers
          SECURITY_HEADERS=("x-content-type-options" "x-frame-options" "x-xss-protection")
          for header in "${SECURITY_HEADERS[@]}"; do
            if curl -s -I "$SITE_URL" | grep -i "$header"; then
              echo "✅ $header header is present"
            else
              echo "⚠️ $header header not found"
            fi
          done
          
          echo "🎯 SEO health check completed"

      - name: Generate SEO Report
        run: |
          echo "📊 Generating SEO deployment report..."
          
          cat > seo-report.md << EOF
          # SEO Deployment Report
          
          **Deployment Date:** $(date)
          **Environment:** Production
          **Site URL:** https://${{ vars.UI_HOSTNAME_PROD }}
          
          ## ✅ SEO Features Deployed
          
          - [x] Dynamic meta tags and Open Graph
          - [x] Structured data (JSON-LD)
          - [x] XML Sitemap generation
          - [x] Robots.txt configuration
          - [x] Security headers
          - [x] Asset compression (gzip)
          - [x] Web manifest for PWA
          - [x] Performance optimizations
          
          ## 🔗 Important URLs
          
          - **Sitemap:** https://${{ vars.UI_HOSTNAME_PROD }}/sitemap.xml
          - **Robots:** https://${{ vars.UI_HOSTNAME_PROD }}/robots.txt
          - **Manifest:** https://${{ vars.UI_HOSTNAME_PROD }}/manifest.json
          
          ## 📈 Next Steps
          
          1. Verify Google Search Console integration
          2. Submit sitemap to search engines
          3. Monitor Core Web Vitals
          4. Track keyword rankings
          5. Analyze user engagement metrics
          
          ## 🛠️ Tools for Monitoring
          
          - Google Search Console
          - Google Analytics 4
          - PageSpeed Insights
          - GTmetrix
          - SEMrush/Ahrefs
          
          EOF
          
          echo "✅ SEO report generated"
          cat seo-report.md

      - name: Upload SEO artifacts
        uses: actions/upload-artifact@v4
        with:
          name: seo-deployment-artifacts
          path: |
            seo-report.md
            frontend/build/sitemap.xml
            frontend/build/robots.txt
            frontend/build/manifest.json
          retention-days: 30
